<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item2" object-name="workflow:name=generic" id="9362c8ee-459f-43c4-b49b-2f86c0e8c4a2" version="0.0.1" api-version="6.0.0" allowed-operations="evf" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Convert policy to template]]></display-name>
  <position y="50.0" x="100.0"/>
  <input>
    <param name="pass" type="string"/>
    <param name="user" type="string"/>
    <param name="serverFQDN" type="string"/>
    <param name="port" type="string"/>
  </input>
  <attrib name="policyData" type="ConfigurationElement" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/ConfigurationElement?id='ee159d56-0ac6-48aa-9bac-32ba392818ed'&dunesName='ConfigurationElement']]></value>
  </attrib>
  <attrib name="policyNames" type="Array/string" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="policyTemplateNames" type="Array/string" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="policyTemplateCaterogy" type="PolicyTemplateCategory" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="45.40909090909091" x="664.5"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item0" type="task">
    <display-name><![CDATA[Scriptable task]]></display-name>
    <script encoded="false"><![CDATA[var host =  System.getModule("com.vmware.eso.vro").createRestHost(serverFQDN, port, user, pass);

for each(var entityName in policyTemplateNames){
	executionData = policyData.getAttributeWithKey(entityName).value;
	delete executionData.href;
	delete executionData.relations;
	delete executionData.version;
	delete executionData.id;
	delete executionData.startup;
	delete executionData.state;
	delete executionData["started-by"];
	delete executionData.priority;
		
	id = createPolicyTemplate(host);
	policyEntityData = updatePolicyTemplate(host, id, executionData);

}

function createPolicyTemplate(host, policyRqData){
	System.log("Create policy template with name : " + policyRqData.name);
	var httpMethod = "POST";
	var queryString = "/vco/api/policies/templates"
	
	
	var operation = System.getModule("com.vmware.eso.vro").createRestOperation(host, "Create policy", httpMethod, queryString);
	var result = System.getModule("com.vmware.eso.vro").executeRestOperation(operation, null, JSON.stringify(policyRqData));
	
	if(result && result.length > 0){
	   result = JSON.parse(result);
	    error = result.error;
	
	    if(error && error.length>0){
	        throw("Error triggering workflow: " + error);
	    }
	}
	return result.id;
}

function getAllPolicyTemplates(host){
	System.log("Get all policy templates")
	var httpMethod = "GET";
	var queryStringBase = "/vco/api/policies/templates"
	
	
	var operation = System.getModule("com.vmware.eso.vro").createRestOperation(host, "Get policy template", httpMethod, queryStringBase);
	var result = System.getModule("com.vmware.eso.vro").executeRestOperation(operation, null, "");
	result = JSON.parse(result);
	
	return result.link;
}

function getPolicyTemplateByName(host, name, appTemplates){
	System.log("Get policy template by name : " + name);
	
	var httpMethod = "GET";
	
	for each(var template in appTemplates){
		var attributes = template.attributes;

		for each(var attribute in attributes){
			if(attribute.name = "name" && attribute.value == name){
				var queryString = template.href.split(port).pop();
				operation = System.getModule("com.vmware.eso.vro").createRestOperation(host, "Get policy template", httpMethod, queryString);
				result =  System.getModule("com.vmware.eso.vro").executeRestOperation(operation, null, "");

				return JSON.parse(result);
			}
		}
	}
	return null;
}
function createPolicyTemplate(host){
	System.log("Create base policy template");
	var httpMethod = "POST";
	var queryString = "/vco/api/policies/templates"
	
	var operation = System.getModule("com.vmware.eso.vro").createRestOperation(host, "Create policy template", httpMethod, queryString);
	var result = System.getModule("com.vmware.eso.vro").executeRestOperation(operation, null, "");
	
	if(result && result.length > 0){
	   result = JSON.parse(result);
	    error = result.error;
	
	    if(error && error.length>0){
	        throw("Error triggering workflow: " + error);
	    }
	}
	return result.id;
}

function updatePolicyTemplate(host, id, executionData){
	System.log("Update policy template with id: " + id);
	var httpMethod = "PUT";
	var queryString = "/vco/api/policies/templates/" + id;
	System.log(JSON.stringify(executionData))	
	var operation = System.getModule("com.vmware.eso.vro").createRestOperation(host, "Update policy template", httpMethod, queryString);
	var result = System.getModule("com.vmware.eso.vro").executeRestOperation(operation, null, JSON.stringify(executionData));
	System.log(result)
	if(result && result.length > 0){
	   result = JSON.parse(result);
	    error = result.error;
	
	    if(error && error.length>0){
	        throw("Error triggering workflow: " + error);
	    }
	}
	
	return result;
}
]]></script>
    <in-binding>
      <bind name="policyData" type="ConfigurationElement" export-name="policyData"/>
      <bind name="pass" type="string" export-name="pass"/>
      <bind name="user" type="string" export-name="user"/>
      <bind name="serverFQDN" type="string" export-name="serverFQDN"/>
      <bind name="port" type="string" export-name="port"/>
      <bind name="policyTemplateNames" type="Array/string" export-name="policyTemplateNames"/>
    </in-binding>
    <out-binding/>
    <position y="55.40909090909091" x="484.5"/>
  </workflow-item>
  <workflow-item name="item2" out-name="item3" type="task">
    <display-name><![CDATA[Scriptable task]]></display-name>
    <script encoded="false"><![CDATA[var host =  System.getModule("com.vmware.eso.vro").createRestHost(serverFQDN, port, user, pass);

var allPolicies = getAllPolicies(host);
policyNames = new Array();

for each(var policyObject in allPolicies){
	var attributes = policyObject.attributes;
	for each(var attribute in attributes){
		System.log(attribute.name)
		if(attribute.name == "name"){
			policyNames.push(attribute.value)
		}
	}		
}

function getAllPolicies(host){
	System.log("Get all policies");
	var httpMethod = "GET";
	var queryStringBase = "/vco/api/policies"
	
	
	var operation = System.getModule("com.vmware.eso.vro").createRestOperation(host, "Get policy template", httpMethod, queryStringBase);
	var result = System.getModule("com.vmware.eso.vro").executeRestOperation(operation, null, "");
	result = JSON.parse(result);
	
	return result.relations.link;
}]]></script>
    <in-binding>
      <bind name="pass" type="string" export-name="pass"/>
      <bind name="user" type="string" export-name="user"/>
      <bind name="serverFQDN" type="string" export-name="serverFQDN"/>
      <bind name="port" type="string" export-name="port"/>
      <bind name="policyNames" type="Array/string" export-name="policyNames"/>
    </in-binding>
    <out-binding>
      <bind name="policyNames" type="Array/string" export-name="policyNames"/>
    </out-binding>
    <position y="55.40909090909091" x="204.5"/>
  </workflow-item>
  <workflow-item name="item3" out-name="item1" type="input">
    <display-name><![CDATA[User interaction]]></display-name>
    <in-binding>
      <bind name="security.group" type="LdapGroup" explicitly-not-bound="true" export-name="NULL">
        <description><![CDATA[Any user member of this security group will be authorized to answer this 'Input']]></description>
      </bind>
      <bind name="security.assignees" type="Array/LdapUser" explicitly-not-bound="true" export-name="NULL">
        <description><![CDATA[Any user member of this array will be authorized to answer this 'Input']]></description>
      </bind>
      <bind name="security.assignee.groups" type="Array/LdapGroup" explicitly-not-bound="true" export-name="NULL">
        <description><![CDATA[Any user member of any group in this array will be authorized to answer this 'Input']]></description>
      </bind>
      <bind name="timeout.date" type="Date" explicitly-not-bound="true" export-name="NULL">
        <description><![CDATA[If not null, this input item will wait until date and will continue workflow execution.]]></description>
      </bind>
    </in-binding>
    <out-binding>
      <bind name="policyTemplateNames" type="Array/string" export-name="policyTemplateNames"/>
      <bind name="policyTemplateCaterogy" type="PolicyTemplateCategory" export-name="policyTemplateCaterogy"/>
    </out-binding>
    <presentation>
      <p-param name="policyTemplateNames">
        <desc><![CDATA[policyTemplateNames]]></desc>
        <p-qual kind="ognl" name="genericEnumeration" type="Array/string"><![CDATA[#policyNames]]></p-qual>
        <p-qual kind="static" name="sameValues" type="boolean"><![CDATA[false]]></p-qual>
      </p-param>
      <p-param name="policyTemplateCaterogy">
        <desc><![CDATA[policyTemplateCaterogy]]></desc>
      </p-param>
    </presentation>
    <position y="55.40909090909091" x="344.5"/>
  </workflow-item>
  <presentation>
    <p-param name="serverFQDN">
      <desc><![CDATA[serverFQDN]]></desc>
    </p-param>
    <p-param name="port">
      <desc><![CDATA[port]]></desc>
    </p-param>
    <p-param name="user">
      <desc><![CDATA[user]]></desc>
    </p-param>
    <p-param name="pass">
      <desc><![CDATA[pass]]></desc>
    </p-param>
  </presentation>
</workflow>