<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item1" object-name="workflow:name=generic" id="6ba3cb2f-cf4f-4563-9273-5b3b9febda34" version="0.0.10" api-version="6.0.0" allowed-operations="evf" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[PolicyTemplateDataConfigurator]]></display-name>
  <position y="50.0" x="100.0"/>
  <input>
    <param name="policyTemplateRestData" type="string"/>
    <param name="serverFQDN" type="string"/>
    <param name="port" type="number"/>
    <param name="user" type="string"/>
    <param name="pass" type="string"/>
    <param name="captureFromServer" type="boolean"/>
    <param name="IsPolicyTemplate" type="boolean"/>
  </input>
  <attrib name="contentData" type="ConfigurationElement" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/ConfigurationElement?id='3e27bff6-a569-4af3-8ad6-321d86e62bfc'&dunesName='ConfigurationElement']]></value>
  </attrib>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="45.40909090909091" x="384.5"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item0" type="task">
    <display-name><![CDATA[Scriptable task]]></display-name>
    <script encoded="false"><![CDATA[entityTypeName = IsPolicyTemplate ? "policyTemplates" : "policies";
var defaultTemplates = ["SNMP Trap Host", "Subscription"]

if(captureFromServer){
	var host =  System.getModule("com.vmware.eso.vro").createRestHost(serverFQDN, port, user, pass);
	
	var entities = IsPolicyTemplate? getAllPolicyTemplates(host) : getAllPolicies(host);
	var policyData = [];
	
	for each(var entity in entities){
		var queryString = entity.href.split(port).pop()
		data = getEntityById(host, queryString);
		name = data.name;
		if(data.name){
			if(IsPolicyTemplate && defaultTemplates.indexOf(data.name)!=-1){
				continue;
			}else{
				System.log(data.name);
				policyData.push(data);	
			}
		}
		
	}
	contentData.setAttributeWithKey(entityTypeName, policyData);
}else{
	var data = JSON.parse(policyTemplateRestData);
	policyData = contentData.getAttributeWithKey(entityTypeName).value;
	policyData.push(data);
	contentData.setAttributeWithKey(entityTypeName, policyData);
}

function getEntityById(host, queryString){
	var httpMethod = "GET";
	
	operation = System.getModule("com.vmware.eso.vro").createRestOperation(host, "Get policy template by id", httpMethod, queryString);
	result =  System.getModule("com.vmware.eso.vro").executeRestOperation(operation, null, "");

	return JSON.parse(result);
}

function getAllPolicyTemplates(host){
	var httpMethod = "GET";
	var queryStringBase = "/vco/api/policies/templates"
	
	
	var operation = System.getModule("com.vmware.eso.vro").createRestOperation(host, "Get policy templates", httpMethod, queryStringBase);
	var result = System.getModule("com.vmware.eso.vro").executeRestOperation(operation, null, "");
	result = JSON.parse(result);
	
	return result.link;
}

function getAllPolicies(host){
	var httpMethod = "GET";
	var queryStringBase = "/vco/api/policies"
	
	
	var operation = System.getModule("com.vmware.eso.vro").createRestOperation(host, "Get all policies", httpMethod, queryStringBase);
	var result = System.getModule("com.vmware.eso.vro").executeRestOperation(operation, null, "");
	result = JSON.parse(result);
	
	return result.relations.link;
}]]></script>
    <in-binding>
      <bind name="policyTemplateRestData" type="string" export-name="policyTemplateRestData"/>
      <bind name="serverFQDN" type="string" export-name="serverFQDN"/>
      <bind name="port" type="number" export-name="port"/>
      <bind name="user" type="string" export-name="user"/>
      <bind name="pass" type="string" export-name="pass"/>
      <bind name="captureFromServer" type="boolean" export-name="captureFromServer"/>
      <bind name="contentData" type="ConfigurationElement" export-name="contentData"/>
      <bind name="IsPolicyTemplate" type="boolean" export-name="IsPolicyTemplate"/>
    </in-binding>
    <out-binding/>
    <position y="55.40909090909091" x="204.5"/>
  </workflow-item>
  <presentation>
    <p-param name="policyTemplateRestData">
      <desc><![CDATA[policyRestData]]></desc>
      <p-qual name="textInput" type="void"><![CDATA[__NULL__]]></p-qual>
      <p-qual kind="ognl" name="notVisible" type="boolean"><![CDATA[#captureFromServer]]></p-qual>
    </p-param>
    <p-param name="captureFromServer">
      <desc><![CDATA[captureFromServer]]></desc>
    </p-param>
    <p-param name="serverFQDN">
      <desc><![CDATA[serverFQDN]]></desc>
      <p-qual kind="ognl" name="notVisible" type="boolean"><![CDATA[!#captureFromServer]]></p-qual>
    </p-param>
    <p-param name="port">
      <desc><![CDATA[port]]></desc>
      <p-qual kind="ognl" name="notVisible" type="boolean"><![CDATA[!#captureFromServer]]></p-qual>
    </p-param>
    <p-param name="user">
      <desc><![CDATA[user]]></desc>
      <p-qual kind="ognl" name="notVisible" type="boolean"><![CDATA[!#captureFromServer]]></p-qual>
    </p-param>
    <p-param name="pass">
      <desc><![CDATA[pass]]></desc>
      <p-qual kind="ognl" name="notVisible" type="boolean"><![CDATA[!#captureFromServer]]></p-qual>
    </p-param>
    <p-param name="IsPolicyTemplate">
      <desc><![CDATA[IsPolicyTemplate]]></desc>
    </p-param>
  </presentation>
</workflow>